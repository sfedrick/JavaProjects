package lab5.stack_queue;
import java.util.*;
public class DoubleStack<E> implements Stack<E> {
	private static final int capacity=1000;
	private int usersize;
	private int size1=-1;
	private int size2=-1;
	private E[] stack1;
	private E[] stack2;
	public DoubleStack() {
		this(capacity);
	}
	public DoubleStack(int input) {
		if(input%2==0) {
			usersize=input;
			stack1=(E[])new Object[input/2];
			stack2=(E[])new Object[input/2];
		}
		else {
			usersize=input+1;
			stack1=(E[])new Object[(input/2)];
			stack2=(E[])new Object[input/2];
			
		}
	}
	public int size() {
		
		return size1+size2+2;
	}
	public boolean isEmpty() {
		return size1+size2==-2;
		
	}
	public void push(int stackId,E e) throws IllegalStateException{
		if(size1==(usersize)/2){
			System.out.println((usersize)/2);
			System.out.println("this is the top size"+size1);
			throw new IllegalStateException("top is full");	
		}
		else if(size2==(usersize)/2){
			throw new IllegalStateException("bottom is full");
		}
		else if (stackId==1) {
			System.out.println("this is the top size"+size1);
			stack1[++size1]=e;
			
		}
		else {
			stack1[++size2]=e;
		}
		
		
	}
	public E top() {
		E x=null;
		if(isEmpty()) {
			return x;
		}
		else {
			x=stack1[size1];
			return x;
		}
		
		
	}
	public E bot() {
		E x=null;
		if(isEmpty()) {
			return x;
		}
		else {
			x=stack2[size2];
			return x;
		}
		
		
	}
	public E pop() {
		E x=null;
		if(isEmpty()) {
			return x;
		}
		else {
			x=stack1[size1];
			stack1[size1]=null;
			size1--;
			return x;
		}
	}
	public E scoop() {
		E x=null;
		if(isEmpty()) {
			return x;
		}
		else {
			x=stack2[size2];
			stack2[size2]=null;
			size2--;
			return x;
		}
	}
	

}
