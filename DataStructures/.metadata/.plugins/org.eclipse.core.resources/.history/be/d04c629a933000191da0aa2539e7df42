package lab3.LinkedList;

public class CityDLL {
    public static class Node {
    	private City data;
    	private Node next;
    	private Node previous;
    	public Node(City data, Node next,Node previous) {
    		this.data = data;
    		this.next = next;
    		this.previous=previous;
    	}

    	public City getData() {return data;}
    	public Node getNext() {return next;}
    	public Node getPrevious() {return previous;}
    	public void setNext(Node n) {next = n;}
    	public void setPrevious(Node n) {previous = n;}
    }

    private Node head = null;
    private Node tail = null;
    private int size = 0;
    public CityDLL() {};
    	public int size() {
    		return size;
    	}
    	public boolean isEmpty() {
    		return size == 0;
    	}

    	public City first() {
    		if (isEmpty()) {
    			return null;
    		}	
    		else {
    			return head.getData();
    		}
    	}

    	public City last() {
    		if (isEmpty()) {
    			return null;
    		}
    		else {
    			return tail.getData();
    		}
    	}
    	
    	public void addLast(City data) {
    		Node newest = new Node(data, null, tail);
    		if (isEmpty()) { 
    			head = newest;
    		}
    		else if(size==1) {
    			tail.setNext(newest);
    			tail.setPrevious(head);
    		}
    		else {
    			tail.setNext(newest);
    		}
    		tail = newest; 
    		size++;
    	}
    
	    public void addFirst(City data) {
			head = new Node(data, head, null);
			if (isEmpty()) {
			    tail = head;
			}
			size++;
	    }
	    
	    public City removeFirst() {
			if (isEmpty()) {
			    return null;
			}
			City target = head.getData();
			head = head.getNext();
			size--;
			if (isEmpty()) {
			    tail=null;
			}
			return target;
	    }
	
	    public City find (String name) {
			for(Node n = head; n!=null; n=n.getNext()) {
			    City data = n.getData();
			    if (data.getCity().equals(name)) {
				return data;
			    }
			}
		        return null;
	    }
	    public Node findnext (String name) {
	    	Node after=null;
			for(Node n = head; n!=null; n=n.getNext()) {
			    City data = n.getData();
			    if (data.getCity().equals(name)) {
			    after=n.getNext();
				return after;
			    }
			}
				Node n= null;
		        return n;
	    }
	    public Node findbefore (String name) {
	    	Node before=null;
			for(Node n = tail; n!=null; n=n.getPrevious()) {
			    City data = n.getData();
			    if (data.getCity().equals(name)) {
				return before;
			    }
			    else {
			    	before=n;
			    }
			}
				Node n= null;
		        return n;
	    }
	    public void insertbefore(City c,Node n) {
	    	
	    	if(isEmpty()) {
	    		addLast(c);
	    	}
	    	else {
	    	Node before=null;
	    	before=n.getPrevious();
	    	Node add=new Node(c,n,n.getPrevious());
			before.setNext(add);
			n.setPrevious(add);
			size++;
			
	    	}   
			   
    		
    	}
	    
	    public void insertsorted(City c) {
	    	
			if (isEmpty()) {
				addLast(c);
				
			}
			else if (size==1) {
				String name=c.getCity();
			    String nodename=head.getData().getCity();
				if (name.compareToIgnoreCase(nodename)<0) {
					Node add=new Node(c,tail,null);
					tail=head;
					tail.setNext(null);
			    	head=add;
			    	size++;
			    }
				else {
					addLast(c);
				}
			}
			else {
				for (Node n=head; n!=null; n=n.getNext()){
				    String name=c.getCity();
				    String nodename=n.getData().getCity();
				    System.out.println(nodename);
				    Node insertbefore=n;
				    if (name.compareToIgnoreCase(nodename)<0) {
				    	insertbefore(c,insertbefore);
				    	n=null;
					
				    }
				    
				}
				
			}
		addLast(c);
			
	    }
	    
	    public String toString() {
			String s = new String();
			for (Node n=head; n!=null; n=n.getNext()){
			    s = s + n.getData();
			    if (n != tail) {
				s = s+", ";
			    }
			}
			return s; 
	    }
}

